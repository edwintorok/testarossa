#!/usr/bin/env ocamlscript
Ocaml.packs := ["lwt"; "lwt.preemptive"; "xen-api-client-lwt"; "re"; "ezxmlm"; "ezjsonm"];
Ocaml.sources := ["../scripts/yorick.ml"; "test_common.ml"];
Ocaml.ocamlflags := ["-thread"]
--
open Yorick
open Lwt
open Xen_api
open Xen_api_lwt_unix
open Test_common

let prefix = "xcluster"
let n = 2

let quicktest_cmd = "vagrant ssh " ^ prefix ^ "1 -c 'sudo /opt/xensource/debug/quicktest -only-sr gfs2'"

let _ =
  let th =
    (*    echo "Updating vagrant box to latest version";
    update_box (prefix ^ "1");*)
  (*  echo "Starting up host";
    start_all prefix n;*)
(*    echo "Setting up infrastructure VM for iSCSI export";
    let _ = setup_infra () in*)
    echo "Building pool";
    let hosts = get_hosts prefix n in
    get_pool hosts
    >>= fun state ->
    find_or_create_mirage_vm state >>= fun (state,vm) ->
    echo "Creating shared GFS2 SR";
    get_sr state GFS2
    >>= fun state ->
    begin match state.gfs2_sr with
    | Some (_, uuid) -> echo "GFS2 SR uuid: %s%!" uuid
    | None -> echo "No GFS2 SR!"
    end;
    echo "Running quicktest...";
    match !?* (?|>) "%s" quicktest_cmd with
    | (_, 0) ->
      echo "Quicktest finished successfully!";
      Lwt.return ();
    | (stdout, rc) ->
      echo "---[ BEGIN OUTPUT FROM QUICKTEST ]---";
      echo "%s" (trim stdout);
      echo "---[  END OUTPUT FROM QUICKTEST  ]---";
      echo "Quicktest failed (exit code %d)" rc;
      exit rc;
  in
  run_and_self_destruct th;
