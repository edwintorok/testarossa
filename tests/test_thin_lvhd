#!/usr/bin/env ocamlscript
(* Thin lvhd tests *)
Ocaml.packs := ["lwt"; "xen-api-client.lwt"; "re"; "ezxmlm"];
Ocaml.sources := ["../scripts/yorick.ml"; "test_common.ml"]
--
open Yorick
open Lwt
open Xen_api
open Xen_api_lwt_unix
open Test_common

let test_vdi_write state =
  let rpc = state.master_rpc in
  let session_id = state.master_session in
  let allocation_quantum = 0.001 in
  let initial_allocation = 0.01 in
  match state.iscsi_sr, state.iscsi_sr_uuid with
  | Some sr, Some sr_uuid ->
    let sm_config = [
      "allocation_quantum", string_of_float allocation_quantum;
      "initial_allocation", string_of_float initial_allocation;
    ] in
    Printf.printf "Creating VDI on SR %s...\n%!"  sr_uuid;
    VDI.create ~rpc ~session_id ~name_label:"test_vdi" ~name_description:""
      ~sR:sr ~virtual_size:(10737418240L) (* 10 gigs *)
      ~_type:`user ~sharable:false ~read_only:false ~other_config:[] ~xenstore_data:[]
      ~sm_config ~tags:[]
    >>= fun vdi ->
    VDI.get_uuid ~rpc ~session_id ~self:vdi
    >>= fun vdi_uuid ->
    Printf.printf "Done: %s\n%!" vdi_uuid;
    let master = state.master in
    get_control_domain state master
    >>= fun vm ->
    VBD.create ~rpc ~session_id ~vM:vm ~vDI:vdi ~userdevice:"0" ~bootable:false
      ~mode:`RW ~_type:`Disk ~unpluggable:true ~empty:false ~other_config:[]
      ~qos_algorithm_type:"" ~qos_algorithm_params:[]
    >>= fun vbd ->
    VBD.get_uuid ~rpc ~session_id ~self:vbd >>= fun vbd_uuid ->
    Printf.printf "Plugging VDI (VBD=%s) to dom0...\n%!" vbd_uuid;
    VBD.plug ~rpc ~session_id ~self:vbd >>= fun () ->
    Printf.printf "Done!\n%!";
    VBD.get_device ~rpc ~session_id ~self:vbd
    >>= fun device ->
    let cmd = Printf.sprintf "vagrant ssh host1 -c 'sudo /scripts/patterns.py /dev/%s 5368709120 write 3'" device in
    Printf.printf "Executing %s...\n%!" cmd;
    ?|> "%s" cmd;
    Printf.printf "Done!\n%!";
    Printf.printf "Unplugging VDI (VBD=%s) from dom0...\n%!" vbd_uuid;
    VBD.unplug ~rpc ~session_id ~self:vbd >>= fun () ->
    Printf.printf "Done!\n%!";
    VDI.destroy ~rpc ~session_id ~self:vdi >>= fun () ->
    Lwt.return ()


let _ =
  let th =
    start_all 3;
    Printf.printf "XXXX started\n%!";
    let iscsi_info = setup_infra () in
    Printf.printf "XXXX setup_infra finished\n%!";
    let hosts = get_hosts 3 in
    get_pool hosts
    >>= fun state ->
    get_iscsi_sr state
    >>= fun state ->
    (match state.iscsi_sr_uuid with Some x -> Printf.printf "Got SR uuid: %s\n%!" x | None -> Printf.printf "No ISCSI SR!\n%!");
    test_vdi_write state
    >>= fun () ->
    Lwt.return ()
  in
  Lwt_main.run th;

(* Local Variables: *)
(* mode: tuareg *)
(* End: *)
  



